service: serverless-first-try
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless-first-try
  stage: dev
  region: us-east-2
  apiGateway:
    shouldStartNameWithService: true
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - s3:GetObject
        - s3:PutObject
        - ses:*
      Resource: "*"
  apiKeys:
    - free:
      - MyFreeApiKey
    - paid:
      - MyPaidApiKey
  usagePlan:
    - free:
        quota:
          limit: 1000
          period: MONTH
        throttle:
          rateLimit: 5
          burstLimit: 20
    - paid:
        quota:
          limit: 10000
          period: MONTH
        throttle:
          rateLimit: 50
          burstLimit: 200

plugins:
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  bucketName: serverlessuploadbucket

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{id}
          method: GET
          cors: true
          private: true
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{id}
          method: GET
          cors: true
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/
          method: POST
          cors: true
  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true
  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - http:
          path: send-email
          method: POST
          cors: true

resources:
  Resources:
    DemoBupcketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverlessuploadbucket
    MyDynamodbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
